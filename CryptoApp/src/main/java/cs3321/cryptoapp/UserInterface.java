

package cs3321.cryptoapp;

import javax.swing.JOptionPane;

public class UserInterface extends javax.swing.JFrame {
    
    private KeyRing keyRing;
    private ManageCiphers manageCiphers;
    private FileIO fileIO;
    
    /**
     * Creates new form cryptJFrame
     * THIS FUNCTION AUTOMATICALLY GENERATED BY NETBEANS
     */
    public UserInterface() {
        initComponents();
        keyRing = new KeyRing();
        manageCiphers = new ManageCiphers(keyRing);
        fileIO = new FileIO();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpEncType = new javax.swing.ButtonGroup();
        rbCaesar = new javax.swing.JRadioButton();
        rbVigenere = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextbox = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        cipherTextbox = new javax.swing.JTextArea();
        lblPlainTextbox = new javax.swing.JLabel();
        lblCipherTextbox = new javax.swing.JLabel();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        btnGenerateKey = new javax.swing.JButton();
        btnImportKey = new javax.swing.JButton();
        lblKeysHeader = new javax.swing.JLabel();
        lblCaesarKey = new javax.swing.JLabel();
        lblVigKey = new javax.swing.JLabel();
        btnOpenPlain = new javax.swing.JButton();
        btnSavePlain = new javax.swing.JButton();
        btnOpenCipher = new javax.swing.JButton();
        btnSaveCipher = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CS 3321");

        btnGrpEncType.add(rbCaesar);
        rbCaesar.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbCaesar.setSelected(true);
        rbCaesar.setText("Caesar");
        rbCaesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCaesarActionPerformed(evt);
            }
        });

        btnGrpEncType.add(rbVigenere);
        rbVigenere.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rbVigenere.setText("VigenÃ¨re");
        rbVigenere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVigenereActionPerformed(evt);
            }
        });

        plainTextbox.setColumns(20);
        plainTextbox.setLineWrap(true);
        plainTextbox.setRows(5);
        plainTextbox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(plainTextbox);

        cipherTextbox.setColumns(20);
        cipherTextbox.setLineWrap(true);
        cipherTextbox.setRows(5);
        cipherTextbox.setWrapStyleWord(true);
        jScrollPane3.setViewportView(cipherTextbox);

        lblPlainTextbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPlainTextbox.setText("Plain Text:");

        lblCipherTextbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCipherTextbox.setText("Cipher Text:");

        btnEncrypt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnEncrypt.setText("ENCRYPT -->");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnDecrypt.setText("DECRYPT -->");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnGenerateKey.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnGenerateKey.setText("Generate Key");
        btnGenerateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateKeyActionPerformed(evt);
            }
        });

        btnImportKey.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnImportKey.setText("Import Key");
        btnImportKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportKeyActionPerformed(evt);
            }
        });

        lblKeysHeader.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblKeysHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblKeysHeader.setText("Active Keys");

        lblCaesarKey.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCaesarKey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaesarKey.setText("[No Key]");

        lblVigKey.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblVigKey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVigKey.setText("[No Key]");

        btnOpenPlain.setText("Open");
        btnOpenPlain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenPlainActionPerformed(evt);
            }
        });

        btnSavePlain.setText("Save");
        btnSavePlain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePlainActionPerformed(evt);
            }
        });

        btnOpenCipher.setText("Open");
        btnOpenCipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenCipherActionPerformed(evt);
            }
        });

        btnSaveCipher.setText("Save");
        btnSaveCipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCipherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 40, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnEncrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDecrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPlainTextbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnOpenPlain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSavePlain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCipherTextbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpenCipher)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveCipher))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbCaesar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGenerateKey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImportKey, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbVigenere))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVigKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblKeysHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCaesarKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblKeysHeader)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCaesar)
                    .addComponent(btnGenerateKey)
                    .addComponent(btnImportKey)
                    .addComponent(lblCaesarKey))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(rbVigenere))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVigKey)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCipherTextbox)
                            .addComponent(btnOpenCipher)
                            .addComponent(btnSaveCipher))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlainTextbox, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnOpenPlain)
                                .addComponent(btnSavePlain)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEncrypt)
                                .addGap(18, 18, 18)
                                .addComponent(btnDecrypt)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1)
                                .addContainerGap())))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbCaesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCaesarActionPerformed
        //Automatically generated function, but no code needed here.
    }//GEN-LAST:event_rbCaesarActionPerformed

    private void rbVigenereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVigenereActionPerformed
        //Automatically generated function, but no code needed here.
    }//GEN-LAST:event_rbVigenereActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        CryptoControlTemplate crypt = null;
        if(rbCaesar.isSelected())
        {
            if(keyRing.getCaesarCipher()==null)
            {
                JOptionPane.showMessageDialog(rootPane, "Cipher method requested has no active key.");
                return;
            }
            crypt = new CryptoControlCaesar(keyRing.getCaesarCipher());
        }
        if(rbVigenere.isSelected())
        {
            if(keyRing.getVigenereCipher()==null)
            {
                JOptionPane.showMessageDialog(rootPane, "Cipher method requested has no active key.");
                return;
            }
            crypt = new CryptoControlVigenere(keyRing.getVigenereCipher());
        }
        crypt.setPlainText(plainTextbox.getText());
        
        boolean success = crypt.encrypt();
        if (success)
        {
            JOptionPane.showMessageDialog(rootPane, "Encryption success.");
            cipherTextbox.setText(crypt.getCipherText());
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Error with encryption.");
        
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        CryptoControlTemplate crypt = null;
        if(rbCaesar.isSelected())
        {
            crypt = new CryptoControlCaesar(keyRing.getCaesarCipher());
        }
        if(rbVigenere.isSelected())
        {
            crypt = new CryptoControlVigenere(keyRing.getVigenereCipher());
        }
        crypt.setCipherText(cipherTextbox.getText());
        
        boolean success = crypt.decrypt();
        if (success)
        {
            JOptionPane.showMessageDialog(rootPane, "Decryption success.");
            plainTextbox.setText(crypt.getPlainText());
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Error with decryption.");

    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnGenerateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateKeyActionPerformed
        
        String cipherType = "";
        if(rbCaesar.isSelected())
        {
            cipherType = "Caesar";
        }
        if(rbVigenere.isSelected())
        {
            cipherType = "Vigenere";
        }
        boolean success = manageCiphers.generateKey(cipherType);
        if (success)
        {
            JOptionPane.showMessageDialog(rootPane, cipherType + " key successfully activated.");
            if (cipherType.equals("Caesar"))
            {
                this.lblCaesarKey.setText(keyRing.getCaesarCipher().getKey());
            }
            if (cipherType.equals("Vigenere"))
            {
                this.lblVigKey.setText(keyRing.getVigenereCipher().getKey());
            }
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Error activating key.");

  
    }//GEN-LAST:event_btnGenerateKeyActionPerformed

    private void btnImportKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportKeyActionPerformed
        String cipherType = "";
        if(rbCaesar.isSelected())
        {
            cipherType = "Caesar";
        }
        if(rbVigenere.isSelected())
        {
            cipherType = "Vigenere";
        }
        boolean success = manageCiphers.importKey(cipherType);
        if (success)
        {
            JOptionPane.showMessageDialog(rootPane, cipherType + " key successfully activated.");
            if (cipherType.equals("Caesar"))
            {
                this.lblCaesarKey.setText(keyRing.getCaesarCipher().getKey());
            }
            if (cipherType.equals("Vigenere"))
            {
                this.lblVigKey.setText(keyRing.getVigenereCipher().getKey());
            }
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Error activating key.");

    }//GEN-LAST:event_btnImportKeyActionPerformed

    private void btnOpenPlainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenPlainActionPerformed
        // TODO add your handling code here:
        if (fileIO.openFile())
        {
            plainTextbox.setText(fileIO.getText());
        }
        else
            JOptionPane.showMessageDialog(rootPane, "File Error.");
    }//GEN-LAST:event_btnOpenPlainActionPerformed

    private void btnSavePlainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePlainActionPerformed
        // TODO add your handling code here:
        if (fileIO.saveFile(plainTextbox.getText()))
        {
            JOptionPane.showMessageDialog(rootPane, "File saved successfully.");
        }
        else
            JOptionPane.showMessageDialog(rootPane, "File Error.");
    }//GEN-LAST:event_btnSavePlainActionPerformed

    private void btnOpenCipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenCipherActionPerformed
        // TODO add your handling code here:
        if (fileIO.openFile())
        {
            cipherTextbox.setText(fileIO.getText());
        }
        else
            JOptionPane.showMessageDialog(rootPane, "File Error.");
    }//GEN-LAST:event_btnOpenCipherActionPerformed

    private void btnSaveCipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCipherActionPerformed
        // TODO add your handling code here:
        if (fileIO.saveFile(cipherTextbox.getText()))
        {
            JOptionPane.showMessageDialog(rootPane, "File saved successfully.");
        }
        else
            JOptionPane.showMessageDialog(rootPane, "File Error.");
    }//GEN-LAST:event_btnSaveCipherActionPerformed

    
    // MAIN FUNCTION AUTO GENERATED BY NETBEANS.
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnGenerateKey;
    private javax.swing.ButtonGroup btnGrpEncType;
    private javax.swing.JButton btnImportKey;
    private javax.swing.JButton btnOpenCipher;
    private javax.swing.JButton btnOpenPlain;
    private javax.swing.JButton btnSaveCipher;
    private javax.swing.JButton btnSavePlain;
    private javax.swing.JTextArea cipherTextbox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCaesarKey;
    private javax.swing.JLabel lblCipherTextbox;
    private javax.swing.JLabel lblKeysHeader;
    private javax.swing.JLabel lblPlainTextbox;
    private javax.swing.JLabel lblVigKey;
    private javax.swing.JTextArea plainTextbox;
    private javax.swing.JRadioButton rbCaesar;
    private javax.swing.JRadioButton rbVigenere;
    // End of variables declaration//GEN-END:variables
}
